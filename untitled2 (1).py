# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FTawqJSbcUbQIEH77iC7iLlL_flhpsY3
"""



import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

st.set_page_config(page_title="Arrhythmia Classifier", layout="wide")
st.title("MIT-BIH Arrhythmia Classification App")

# Load dataset
@st.cache_data
def load_data():
    df = pd.read_csv("MIT-BIH Arrhythmia Database.csv")
    return df

# Train model
@st.cache_resource
def train_model(df):
    le = LabelEncoder()
    df['type_encoded'] = le.fit_transform(df['type'])

    X = df.drop(columns=['type', 'record', 'type_encoded'])
    y = df['type_encoded']

    X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=42)

    model = RandomForestClassifier(n_estimators=100, random_state=42, class_weight='balanced')
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)

    report = classification_report(y_test, y_pred, target_names=le.classes_, output_dict=True)
    cm = confusion_matrix(y_test, y_pred)

    return model, le, report, cm, le.classes_

df = load_data()
st.subheader("Dataset Preview")
st.dataframe(df.head())

# Train model
st.subheader("Model Training and Evaluation")
model, label_encoder, report, cm, class_labels = train_model(df)

# Display classification report
st.text("Classification Report:")
st.json(report)

# Plot confusion matrix
fig, ax = plt.subplots(figsize=(10, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=class_labels, yticklabels=class_labels, ax=ax)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
st.pyplot(fig)

# Upload new data for prediction
st.subheader("Predict on New Data")
uploaded_file = st.file_uploader("Upload CSV (Same format as original, without 'type' or 'record')", type=["csv"])

if uploaded_file:
    input_data = pd.read_csv(uploaded_file)
    st.write("Input Data Preview:")
    st.dataframe(input_data.head())

    prediction = model.predict(input_data)
    prediction_labels = label_encoder.inverse_transform(prediction)

    input_data["Predicted Class"] = prediction_labels
    st.success("Prediction complete.")
    st.dataframe(input_data)